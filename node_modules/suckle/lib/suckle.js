

var Stream = require('stream').Stream;
var util = require('util');

var concat = Buffer.hasOwnProperty('concat')
    ? Buffer.concat
    : function(chunks, len) {
        var buf = new Buffer(len), offset = 0;
        chunks.forEach(function(chunk) {
            var _len = chunk.length;
            chunk.copy(buf, offset, 0, _len);
            offset += _len;
        });
        return buf;
    };

function Suckle() {
    Stream.call(this)

    this.writable = true;
    this.fns = [];
    this.chunks = [];
    this.chunksLength = 0;

    var pipes = this.pipes = Array.prototype.slice.call(arguments);

    if (typeof pipes[pipes.length-1] === 'function') {
        this.fns.push(pipes.pop());
    };
}

util.inherits(Suckle, Stream);

Suckle.prototype.end = function() {
    var pipes  = this.pipes
      , fns    = this.fns
      , fnsLen = fns.length

    for (var i=0, len=pipes.length; i<len; i++) {
        pipes[i].end();
    };

    if (fnsLen) {
        var buf = concat(this.chunks, this.chunksLength);
        for (var i=0; i<fnsLen; i++) {
            fns[i](buf);
        };
    };
};

Suckle.prototype.write = function(data, encoding) {
    var pipes = this.pipes;

    for (var i=0, len=pipes.length; i<len; i++) {
        pipes[i].write(data, encoding);
    };

    if (this.fns.length) {
        this.chunks.push(data);
        this.chunksLength += data.length;
    };

    return this
}

Suckle.prototype.oncomplete = function(cb) {
    this.fns.push(cb);
    return this;
};

Suckle.prototype.pipe = function(where) {
    this.pipes.push(where);
    return this;
};

module.exports = Suckle;
